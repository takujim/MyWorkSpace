using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using System.IO;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Threading;

using System.Runtime.InteropServices;//for DLL

namespace OriFiler
{
    /// <summary>
    /// エクスプローラユーザコントロール
    /// </summary>
    public partial class UserControl1 : UserControl
    {
        // -----------------------------------------------------------------【Const】

        #region 固定値

        const string C_ContextMenuStripItem_property = "プロパティ";
        const string C_ContextMenuStripItem_OpenFile = "開く";
        const string C_ContextMenuStripItem_OpenDirectory = "このフォルダを開く";
        const string C_ContextMenuStripItem_Create = "新規作成";
        const string C_ContextMenuStripItem_CreateFile = "ファイル作成";
        const string C_ContextMenuStripItem_CreateFolder = "フォルダ作成";
        const string C_ContextMenuStripItem_NewTabOpen = "新しいタブで開く";
        const string C_ContextMenuStripItem_CurrentTabOpen = "現在のタブで開く";
        const string C_ContextMenuStripItem_Copy = "コピー";
        const string C_ContextMenuStripItem_Move = "切り取り";
        const string C_ContextMenuStripItem_Paste = "貼り付け";
        const string C_ContextMenuStripItem_UserCustom = "ユーザメニュー";

        const int ThumbnailMaxHeight = 160;
        const int ThumbnailMaxWidth = 160;
        const int TrackMaxCount = 9;

        #endregion

        // -----------------------------------------------------------------【Member Variable】

        #region メンバ変数

        /// <summary>
        /// ユーザメニューの実行パスリスト
        /// </summary>
        private NameValueCollection m_ContextExecList = null;

        /// <summary>
        /// ファイル操作オブジェクト
        /// </summary>
        private CopyPasteMoveManager m_CopyPasteMoveManager = null;

        /// <summary>
        /// ブックマークフォーム
        /// </summary>
        private Form2 m_BookMarkSelect;

        #endregion

        // -----------------------------------------------------------------【Constructer】

        #region コンストラクタ

        public UserControl1(string strRootAddress, CopyPasteMoveManager objCopyPasteMoveManager, Form2 BookMarkForm)
        {
            InitializeComponent();

            // 引数をメンバに設定
            m_CopyPasteMoveManager = objCopyPasteMoveManager;
            m_BookMarkSelect = BookMarkForm;
            if (strRootAddress != string.Empty)
            {
                txtAddress.Text = strRootAddress;
            }

            // 初期設定
            InitTrackBar();
            InitContextMenuStrip();
            InitListView();
            InitTreeView();
        }

        /// <summary>
        /// 親コントロールチェンジイベント（タブページに関連付けされた際に一回発生する）
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void UserControl1_ParentChanged(object sender, EventArgs e)
        {
            DrawTree();
        }

        /// <summary>
        /// 【初期設定】トラックバー
        /// </summary>
        private void InitTrackBar()
        {
            trackBar1.Maximum = TrackMaxCount;
            trackBar1.Value = 0;
        }

        /// <summary>
        /// 【初期設定】ツリー
        /// </summary>
        private void InitTreeView()
        {
            ImageList imgList = new ImageList();
            imgList.Images.Add(new Icon("img\\GenericDir.ico"));
            imgList.Images.Add(new Icon("img\\GenericOpenDir.ico"));
            imgList.Images.Add(new Icon("img\\Documents.ico"));

            //// サンプルプログラムからフォルダ表示用のリソースを無理やり取得した
            //// 以下のソース+resxファイルをxmlで編集した（"TreeNodeImageList.ImageStream"）を追加した
            //ImageList imgList = new ImageList(components);
            //System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UserControl1));
            //imgList.ImageStream = (ImageListStreamer)resources.GetObject("TreeNodeImageList.ImageStream");
            //imgList.Images.SetKeyName(0, "ClosedFolder");
            //imgList.Images.SetKeyName(1, "OpenFolder");

            treeViewMain.ImageList = imgList;
            treeViewMain.HideSelection = true;
        }

        /// <summary>
        ///  【初期設定】リスト
        /// </summary>
        private void InitListView()
        {
            listViewMain.GridLines = true;
            listViewMain.Sorting = SortOrder.Ascending;

            ColumnHeader columnName = new ColumnHeader();
            ColumnHeader columnUpdateDate = new ColumnHeader();
            ColumnHeader columnCreateDate = new ColumnHeader();
            ColumnHeader columnExtention = new ColumnHeader();
            ColumnHeader columnSize = new ColumnHeader();

            columnName.Text = "名前";
            columnUpdateDate.Text = "更新日時";
            columnCreateDate.Text = "作成日時";
            columnExtention.Text = "拡張子";
            columnSize.Text = "サイズ";

            listViewMain.Columns.Add(columnName);
            listViewMain.Columns.Add(columnUpdateDate);
            listViewMain.Columns.Add(columnCreateDate);
            listViewMain.Columns.Add(columnExtention);
            listViewMain.Columns.Add(columnSize);

            listViewMain.FullRowSelect = true;
        }

        /// <summary>
        /// 【初期設定】右クリックメニュー設定取得
        /// </summary>
        private void InitContextMenuStrip()
        {
            // 新タブで開く
            contextMenuTreeViewMain.Items.Add(C_ContextMenuStripItem_NewTabOpen);
            // 現在のタブで開く
            contextMenuTreeViewMain.Items.Add(C_ContextMenuStripItem_CurrentTabOpen);

            // 開く
            contextMenuTreeViewMain.Items.Add(C_ContextMenuStripItem_OpenFile);
            contextMenuListViewMain.Items.Add(C_ContextMenuStripItem_OpenFile);

            // このフォルダを開く
            contextMenuTreeViewMain.Items.Add(C_ContextMenuStripItem_OpenDirectory);
            contextMenuListViewMain.Items.Add(C_ContextMenuStripItem_OpenDirectory);

            // カスタムメニュー
            m_ContextExecList = new NameValueCollection();
            ToolStripMenuItem CustomMenu = new ToolStripMenuItem(C_ContextMenuStripItem_UserCustom);
            ToolStripMenuItem CustomMenu2 = new ToolStripMenuItem(C_ContextMenuStripItem_UserCustom);

            using (StreamReader StReader = new StreamReader("ContextSetting.ini",Encoding.UTF8))
            {
                while (StReader.Peek() > 0)
                {
                    string strTmp = StReader.ReadLine();
                    string[] strTmp2 = strTmp.Split('\t');
                    CustomMenu.DropDownItems.Add(strTmp2[0],null,this.CustomMenuSelectedFromTree);
                    CustomMenu2.DropDownItems.Add(strTmp2[0], null, this.CustomMenuSelectedFromList);
                    m_ContextExecList.Add(strTmp2[0], strTmp2[1]);

                    contextMenuTreeViewMain.Items.AddRange(new ToolStripItem[] { CustomMenu });
                    contextMenuListViewMain.Items.AddRange(new ToolStripItem[] { CustomMenu2 });
                }
            }

            // 新規作成
            ToolStripMenuItem CreateMenuList = new ToolStripMenuItem(C_ContextMenuStripItem_Create);
            CreateMenuList.DropDownItems.Add(C_ContextMenuStripItem_CreateFile, null, Create_File);
            CreateMenuList.DropDownItems.Add(C_ContextMenuStripItem_CreateFolder, null, Create_Folder);
            contextMenuListViewMain.Items.AddRange(new ToolStripItem[] { CreateMenuList });
            ToolStripMenuItem CreateMenuTree = new ToolStripMenuItem(C_ContextMenuStripItem_Create);
            CreateMenuTree.DropDownItems.Add(C_ContextMenuStripItem_CreateFolder, null, Create_Folder);
            contextMenuTreeViewMain.Items.AddRange(new ToolStripItem[] { CreateMenuTree });

            // ファイル操作
            contextMenuListViewMain.Items.Add(C_ContextMenuStripItem_Copy);
            contextMenuListViewMain.Items.Add(C_ContextMenuStripItem_Move);
            contextMenuListViewMain.Items.Add(C_ContextMenuStripItem_Paste);
            contextMenuTreeViewMain.Items.Add(C_ContextMenuStripItem_Copy);
            contextMenuTreeViewMain.Items.Add(C_ContextMenuStripItem_Move);
            contextMenuTreeViewMain.Items.Add(C_ContextMenuStripItem_Paste);

            // プロパティ
            contextMenuTreeViewMain.Items.Add(C_ContextMenuStripItem_property);
            contextMenuListViewMain.Items.Add(C_ContextMenuStripItem_property);

            // 最後にバインドする
            treeViewMain.ContextMenuStrip = contextMenuTreeViewMain;
            listViewMain.ContextMenuStrip = contextMenuListViewMain;
        }

        #endregion

        // -----------------------------------------------------------------【Public】

        #region ルートアドレスを設定

        public string p_RootAddress
        {
            set
            {
                txtAddress.Text = GetFileText(value);
                // ルートが変わったらツリーを再描画する
                DrawTree();
            }
            get
            {
                return txtAddress.Text;
            }
        }

        #endregion

        #region リストビュー表示形式設定

        public void SetListViewMode(View csView)
        {
            listViewMain.View = csView;
        }

        #endregion

        #region ツリービューの内容をCSV形式で出力

        public void TreeViewForCsv(string strPath)
        {
            using(StreamWriter stwriter = new StreamWriter(strPath, false, Encoding.UTF8))
            {
                WriteNode(treeViewMain.Nodes, stwriter, string.Empty);
            }
        }

        #endregion

        // -----------------------------------------------------------------【Event Handler】

        #region イベントハンドラ

        #region フォルダ選択ボタンクリックイベント

        /// <summary>
        /// 参照フォルダ選択ボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button1_Click(object sender, EventArgs e)
        {
            if (folderBrowserDialog_TargetDir.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                txtAddress.Text = folderBrowserDialog_TargetDir.SelectedPath;
                DrawTree();
            }
        }

        #endregion

        #region ルートアドレステキストボックスキープレスイベント

        /// <summary>
        /// ルートアドレステキストボックスキープレスイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtAddress_KeyPress(object sender, KeyPressEventArgs e)
        {
            // Enterキーが押された場合はツリーを再描画
            if (e.KeyChar == (char)Keys.Enter)
            {
                txtAddress.Text = GetFileText(txtAddress.Text);
                DrawTree();
            }
        }

        #endregion

        #region ディレクトリOnly表示切り替えイベント

        /// <summary>
        /// ツリー表示（ディレクトリorファイル含む）切り替えイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            DrawTree();
        }

        #endregion

        #region ブックマーク追加ボタンクリックイベント

        /// <summary>
        /// ブックマーク追加ボタンクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button2_Click(object sender, EventArgs e)
        {
            m_BookMarkSelect.AddBookMark(txtSelectTreeNode.Text);
        }

        #endregion

        #region ブックマーク一覧領域マウス移動イベント

        /// <summary>
        /// ブックマーク一覧ラベル上マウスイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void label3_MouseMove(object sender, MouseEventArgs e)
        {
            if (!m_BookMarkSelect.Visible)
            {
                m_BookMarkSelect.SetDesktopLocation(Cursor.Position.X - m_BookMarkSelect.Size.Width, Cursor.Position.Y);
                m_BookMarkSelect.Show();
            }
        }

        #endregion

        #region トラックバー値変更イベント

        List<ImageList> m_imgList = null;
        private void trackBar1_ValueChanged(object sender, EventArgs e)
        {
            if (listViewMain.Items.Count > 0)
            {
                listViewMain.LargeImageList = m_imgList[trackBar1.Value];
                listViewMain.SmallImageList = m_imgList[trackBar1.Value];
            }
        }

        #endregion


        #region ツリー選択前イベント

        /// <summary>
        /// ツリー選択前イベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void treeView1_BeforeSelect(object sender, TreeViewCancelEventArgs e)
        {
            // 背景色を戻す
            SetNodeBackColor(Color.Transparent);
        }

        #endregion

        #region ツリー選択後イベント

        /// <summary>
        /// ツリー選択後イベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void treeView1_AfterSelect(object sender, TreeViewEventArgs e)
        {
            txtSelectTreeNode.Text = GetFullPathFromSelectNode();

            // リストを描画
            ListViewUpdate();
        }

        #endregion

        #region ツリーノードクリックイベント

        /// <summary>
        /// ツリーノードクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void treeView1_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            // 右クリックでも選択されるようにここで設定している
            treeViewMain.SelectedNode = e.Node;
        }

        #endregion

        #region ツリー開くイベント

        /// <summary>
        /// ツリー開くイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void treeView1_AfterExpand(object sender, TreeViewEventArgs e)
        {
            if (e.Action == TreeViewAction.Expand)
            {
                // 開かれたノード配下を描画
                treeViewMain.BeginUpdate();

                string[] strDirs = Directory.GetDirectories(e.Node.FullPath);
                e.Node.Nodes.Clear();

                foreach (string strAddNode in strDirs)
                {
                    AddSingleNode(e.Node.Nodes, Path.Combine(e.Node.FullPath, strAddNode), TreeViewDirFlg.Checked);
                }

                if (!this.TreeViewDirFlg.Checked)
                {
                    AddFileNode(e.Node.Nodes, e.Node.FullPath);
                }

                treeViewMain.EndUpdate();
                treeViewMain.SelectedNode = e.Node;
            }
        }

        #endregion

        #region ツリーラベル編集イベント、フォルダリネーム処理

        private bool m_TreeLabelEditFlg = false;
        private void treeViewMain_BeforeLabelEdit(object sender, NodeLabelEditEventArgs e)
        {
            m_TreeLabelEditFlg = true;
        }

        /// <summary>
        /// ツリーリネームイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void treeViewMain_AfterLabelEdit(object sender, NodeLabelEditEventArgs e)
        {
            if (e.Label != null)
            {
                Directory.Move(GetFullPathFromSelectNode(), Path.Combine(treeViewMain.SelectedNode.Parent.FullPath, e.Label));
            }
            treeViewMain.LabelEdit = false;
        }

        #endregion

        #region ツリービューキーアップイベント

        /// <summary>
        /// ツリーキーイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void treeViewMain_KeyUp(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.F2:
                    // ノード名編集
                    treeViewMain.LabelEdit = true;
                    treeViewMain.SelectedNode.BeginEdit();
                    break;

                case Keys.F5:
                    // 再描画
                    treeViewMain.SelectedNode.Collapse();
                    treeViewMain.SelectedNode.Expand();
                    break;

                case Keys.Enter:
                    if (m_TreeLabelEditFlg)
                    {
                        m_TreeLabelEditFlg = false;
                    }
                    else
                    {
                        ProcessStart(GetFullPathFromSelectNode());
                    }
                    break;

                case Keys.W:
                    // Control+W
                    // すべて開くorすべて閉じる
                    if (e.Modifiers == Keys.Control)
                    {
                        if (treeViewMain.SelectedNode.IsExpanded)
                        {
                            treeViewMain.SelectedNode.Collapse(false);
                        }
                        else
                        {
                            treeViewMain.BeginUpdate();
                            treeViewMain.SelectedNode.ExpandAll();
                            treeViewMain.EndUpdate();
                        }
                    }
                    break;

                case Keys.C:
                    // コピー
                    if (e.Modifiers == Keys.Control)
                    {
                        m_CopyPasteMoveManager.Copy(GetFullPathFromSelectNode());
                    }
                    break;

                case Keys.X:
                    // 切り取り
                    if (e.Modifiers == Keys.Control)
                    {
                        m_CopyPasteMoveManager.Move(GetFullPathFromSelectNode());
                    }
                    break;

                case Keys.V:
                    // 貼り付け
                    if (e.Modifiers == Keys.Control)
                    {
                        AfterPasteTreeDraw(m_CopyPasteMoveManager.Paste(GetFullPathFromSelectNode()));
                    }
                    break;
            }
        }

        #endregion


        #region リスト上マウスクリックイベント

        /// <summary>
        /// リスト上マウスクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void listViewMain_MouseClick(object sender, MouseEventArgs e)
        {
            // 右クリックでも選択されるように設定
            listViewMain.FocusedItem = listViewMain.GetItemAt(e.X, e.Y);
        }

        #endregion

        #region リストダブルクリックイベント

        /// <summary>
        /// リストダブルクリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void listView1_DoubleClick(object sender, EventArgs e)
        {
            ProcessStart(GetFullPathFromSelectList()[0]);
        }

        #endregion

        #region リストヘッダークリックイベント（ソート）

        private int sortOrder = 1;
        private int sortColumn = 0;
        /// <summary>
        /// リストヘッダークリックイベント並び替え
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void listView1_ColumnClick(object sender, ColumnClickEventArgs e)
        {
            listViewMain.ListViewItemSorter = new ListViewItemComparer(e.Column, sortOrder);
            sortOrder *= -1;
            sortColumn = e.Column;

            //listView1.Columns[e.Column].Text += "▼";
        }

        #endregion

        #region リストスクロールイベント

        private ListViewItem m_tmpItem = null;
        /// <summary>
        /// カスタムイベント（リストのスクロールイベント）TODO:修正要
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void listViewMain_VerticalScrolled(object sender, EventArgs e)
        {
            if (listViewMain.View == View.LargeIcon)
            {
                ListViewItem firstItem = listViewMain.GetItemAt(20, 20);

                if (firstItem != null && m_tmpItem != firstItem)
                {
                    m_tmpItem = firstItem;
                    int startIndex = listViewMain.Items.IndexOf(firstItem);

                    for (int n = startIndex; listViewMain.Items.Count > n && n < startIndex + 30; n++)
                    {
                        ListViewItem tmpItem = listViewMain.Items[n];

                        string strExtention = Path.GetExtension(tmpItem.Text).ToUpper();
                        if (strExtention == ".JPG" || strExtention == ".BMP" || strExtention == ".GIF" || strExtention == ".PNG")
                        {
                            // falseオプションでかなり高速化した
                            Image orig = Image.FromStream(
                                new FileStream(Path.Combine(txtSelectTreeNode.Text, tmpItem.Text)
                                , FileMode.Open, FileAccess.Read), false, false);
                            Image thumbnail = orig.GetThumbnailImage(ThumbnailMaxHeight, ThumbnailMaxWidth, delegate { return false; }, IntPtr.Zero);

                            for (int i = 0; i <= trackBar1.Maximum; i++)
                            {
                                m_imgList[i].Images.Add(thumbnail);
                            }

                            tmpItem.ImageIndex = m_imgList[0].Images.Count - 1;
                        }
                        else
                        {
                        }
                    }
                }
            }
        }

        #endregion

        #region リストラベル編集イベント、ファイルリネーム処理

        private bool m_ListLabelEditFlg = false;
        private void listViewMain_BeforeLabelEdit(object sender, LabelEditEventArgs e)
        {
            m_ListLabelEditFlg = true;
        }

        /// <summary>
        /// リストリネームイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void listViewMain_AfterLabelEdit(object sender, LabelEditEventArgs e)
        {
            if (e.Label != null)
            {
                File.Move(GetFullPathFromSelectList()[0], Path.Combine(txtSelectTreeNode.Text, e.Label));
            }
            listViewMain.LabelEdit = false;
        }

        #endregion

        #region リストビューキーアップイベント

        /// <summary>
        /// リストキーイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void listViewMain_KeyUp(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.F2:
                    listViewMain.LabelEdit = true;
                    listViewMain.SelectedItems[0].BeginEdit();
                    break;

                case Keys.F5:
                    ListViewUpdate();
                    break;

                case Keys.Enter:
                    if (m_ListLabelEditFlg)
                    {
                        m_ListLabelEditFlg = false;
                    }
                    else
                    {
                        ProcessStart(GetFullPathFromSelectList()[0]);
                    }
                    break;

                case Keys.C:
                    // コピー
                    if (e.Modifiers == Keys.Control)
                    {
                        m_CopyPasteMoveManager.Copy(GetFullPathFromSelectList());
                    }
                    break;

                case Keys.X:
                    // 切り取り
                    if (e.Modifiers == Keys.Control)
                    {
                        m_CopyPasteMoveManager.Move(GetFullPathFromSelectList());
                    }
                    break;

                case Keys.V:
                    // 貼り付け
                    if (e.Modifiers == Keys.Control)
                    {
                        m_CopyPasteMoveManager.Paste(txtSelectTreeNode.Text);
                        ListViewUpdate();
                    }
                    break;
            }
        }

        #endregion


        #region 表示形式設定イベント

        private void toolStripMenuItem_Detail_Click(object sender, EventArgs e)
        {
            toolStripMenuItem_Detail.Checked = true;
            toolStripMenuItem_Icon.Checked = false;

            this.SetListViewMode(View.Details);
        }

        private void toolStripMenuItem_Icon_Click(object sender, EventArgs e)
        {
            toolStripMenuItem_Detail.Checked = false;
            toolStripMenuItem_Icon.Checked = true;

            this.SetListViewMode(View.LargeIcon);
        }

        #endregion

        #region 【右クリックメニュー】

        #region ツリー右クリックメニュークリックイベント(第一階層)

        /// <summary>
        /// ツリー右クリックメニュークリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void contextMenuStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            contextMenuClick(e.ClickedItem.Text, GetFullPathFromSelectNode());
        }

        #endregion

        #region リスト右クリックメニュークリックイベント(第一階層)

        /// <summary>
        /// リスト右クリックメニュークリックイベント
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void contextMenuStrip2_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            contextMenuClick(e.ClickedItem.Text, GetFullPathFromSelectList());
        }

        #endregion

        #region ファイル新規作成

        /// <summary>
        /// ファイル新規作成
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Create_File(object sender, EventArgs e)
        {
            int i = 0;
            while (File.Exists(Path.Combine(txtSelectTreeNode.Text, i.ToString())))
            {
                i++;
            }

            using (StreamWriter stWriter = new StreamWriter(Path.Combine(txtSelectTreeNode.Text, i.ToString())))
            {
                // 出力しなくてもファイルは作られるようだ
                //File.Create(Path.Combine(GetFullPathFromSelectNode(),i.ToString()));
                //stWriter.Write(new byte[0]);
            }

            ListViewItem newFile = new ListViewItem(i.ToString());
            listViewMain.Items.Add(newFile);
            listViewMain.LabelEdit = true;
            newFile.BeginEdit();
        }

        #endregion

        #region フォルダ新規作成

        /// <summary>
        /// フォルダ新規作成
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Create_Folder(object sender, EventArgs e)
        {
            m_TreeLabelEditFlg = true;
            m_ListLabelEditFlg = true;

            treeViewMain.SelectedNode.Expand();

            Form3 FolderNameWindow = new Form3();

            string strFolderName = string.Empty;
            while (true)
            {
                if (FolderNameWindow.ShowDialog() == DialogResult.OK)
                {
                    strFolderName = GetDirectoryText(Path.Combine(txtSelectTreeNode.Text, FolderNameWindow.p_ResultText));
                    if (Directory.Exists(strFolderName))
                    {
                        MessageBox.Show("既に存在するフォルダです。別の名前を指定してください。");
                    }
                    else
                    {
                        break;
                    }
                }
                else
                {
                    break;
                }
            }

            if (FolderNameWindow.DialogResult == DialogResult.OK)
            {
                Directory.CreateDirectory(strFolderName);

                TreeNode newDir = new TreeNode(FolderNameWindow.p_ResultText);
                treeViewMain.SelectedNode.Nodes.Add(newDir);
            }

            FolderNameWindow.Close();
        }

        #endregion

        #region ユーザメニュー選択イベント

        private void CustomMenuSelectedFromList(object sender, EventArgs e)
        {
            ProcessStart(m_ContextExecList[sender.ToString()], ConvertListToString(GetFullPathFromSelectList()));
        }

        private void CustomMenuSelectedFromTree(object sender, EventArgs e)
        {
            ProcessStart(m_ContextExecList[sender.ToString()], txtSelectTreeNode.Text);
        }

        #endregion

        #region 指定ノードからタブを開く

        private void OpenTab()
        {
            ((Form1)this.Parent.Parent.Parent).AddTab(Path.GetDirectoryName(GetFullPathFromSelectNode()));
        }

        #endregion

        #endregion

        #endregion

        // -----------------------------------------------------------------【Private Method】

        #region プライベートメソッド

        #region 渡された文字列の末尾に\がついていた場合は、削除して返す

        private string GetFileText(string strAddress)
        {
            if (strAddress.Last() == '\\' && strAddress.Length > 3)
            {
                strAddress = strAddress.Substring(0, strAddress.Length - 1);
            }

            return strAddress;
        }

        #endregion

        #region 渡された文字列の末尾に\がついていない場合は、\を付加して返す

        private string GetDirectoryText(string strAddress)
        {
            if (strAddress.Last() != '\\')
            {
                strAddress = strAddress  + "\\";
            }

            return strAddress;
        }

        #endregion


        #region ノード描画

        #region ルートノードからツリーを描画

        /// <summary>
        /// ルートツリー描画
        /// </summary>
        private void DrawTree()
        {
            if (txtAddress.Text != string.Empty)
            {
                if(new Uri(txtAddress.Text).IsUnc)
                // && new Microsoft.VisualBasic.Devices.Network().Ping(new Uri(txtAddress.Text).Host) Ping確認をする場合
                {
                    try
                    {
                        Directory.GetDirectories(txtAddress.Text);
                    }
                    catch(IOException ex)
                    {
                        // ((System.Exception)(ex)).HResult == -2147023570　としたいが、アクセスできないプロパティ
                        if (ex.Message == "ログオン失敗: ユーザー名を認識できないか、またはパスワードが間違っています。\r\n")
                        {
                            // エクスプローラ開いて認証（WaitForExitで待とうとしたが、対象プロセスは起動後即終了しているようだ）
                            Process tmpProcess = new Process();
                            tmpProcess.StartInfo.FileName = "explorer";
                            tmpProcess.StartInfo.Arguments = "\\\\" + new Uri(txtAddress.Text).Host;
                            tmpProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                            tmpProcess.Start();

                            MessageBox.Show("認証ウインドウで認証後、OKボタンを押してください",
                                tmpProcess.StartInfo.Arguments + "認証",MessageBoxButtons.OK);
                            tmpProcess.Close();
                        }
                    }
                }

                if (Directory.Exists(GetDirectoryText(txtAddress.Text)))
                {
                    // タブ文字列も描画
                    string tabText = txtAddress.Text;
                    if (tabText.Length > 3)
                    {
                        tabText = Path.GetFileName(txtAddress.Text);
                        if (tabText.Length > 15)
                        {
                            tabText = tabText.Substring(0, 15) + "...";
                        }
                    }
                    ((TabPage)this.Parent).Text = tabText;

                    // ---
                    treeViewMain.Nodes.Clear();
                    AddSingleNode(treeViewMain.Nodes, txtAddress.Text, TreeViewDirFlg.Checked);
                    treeViewMain.Nodes[0].Text = txtAddress.Text;
                    treeViewMain.SelectedNode = treeViewMain.Nodes[0];
                }
            }
        }

        #endregion

        #region ノード追加

        /// <summary>
        /// 指定ノード以下全てのノードを作成(ExpandAllで描画できてしまうのでいらないか？)
        /// </summary>
        /// <param name="Nodes"></param>
        /// <param name="FolderPath"></param>
        /// <param name="DirectoryOnly"></param>
        private void AddAllNode(TreeNodeCollection Nodes, string FolderPath ,bool DirectoryOnly)
        {
            TreeNode Node = null;

            // アクセス権ない場合はノードを追加したくないため、ここでDirectoryを取得してみる
            string[] Dirs =  Directory.GetDirectories(FolderPath);
            Node = Nodes.Add(Path.GetFileName(FolderPath));
            Node.ImageIndex = 0;
            Node.SelectedImageIndex = 1;
            foreach (string NextDirectory in Dirs)
            {
                AddAllNode(Node.Nodes, NextDirectory, DirectoryOnly);
            }

            if (!DirectoryOnly)
            {
                foreach (string TargetFile in Directory.GetFiles(FolderPath))
                {
                    TreeNode NodeFile = Node.Nodes.Add(Path.GetFileName(TargetFile));
                    NodeFile.ImageIndex = 2;
                    NodeFile.SelectedImageIndex = 2;
                }
            }
        }

        /// <summary>
        /// 指定ノード以下一階層のノードを作成
        /// </summary>
        /// <param name="Nodes"></param>
        /// <param name="FolderPath"></param>
        /// <param name="DirectoryOnly"></param>
        private void AddSingleNode(TreeNodeCollection Nodes, string FolderPath, bool DirectoryOnly)
        {
            try
            {

                TreeNode Node = null;

                // アクセス権ない場合はノードを追加したくないため、ここでDirectoryを取得してみる
                string[] Dirs = Directory.GetDirectories(FolderPath);
                Node = Nodes.Add(Path.GetFileName(FolderPath));
                Node.ImageIndex = 0;
                Node.SelectedImageIndex = 1;

                foreach (string NextDirectory in Dirs)
                {
                    Node.Nodes.Add(Path.GetFileName(NextDirectory));
                }

                if (!DirectoryOnly)
                {
                    AddFileNode(Node.Nodes, FolderPath);
                }
            }
            catch
            {
            }
        }

        /// <summary>
        /// 指定フォルダ内のファイルを指定ノードに追加する
        /// </summary>
        /// <param name="Nodes"></param>
        /// <param name="FolderPath"></param>
        private void AddFileNode(TreeNodeCollection Nodes, string FolderPath)
        {
            foreach (string TargetFile in Directory.GetFiles(FolderPath))
            {
                TreeNode NodeFile = Nodes.Add(Path.GetFileName(TargetFile));
                NodeFile.ImageIndex = 2;
                NodeFile.SelectedImageIndex = 2;
            }
        }

        #endregion

        #endregion

        #region 貼り付け後ツリー描画

        private void AfterPasteTreeDraw(CopyPasteMoveManager.OperationResult PasteResult)
        {
            if (treeViewMain.SelectedNode.Nodes.Count > 0)
            {
                treeViewMain.SelectedNode.Collapse();
                treeViewMain.SelectedNode.Expand();
            }
            else
            {
                AddSingleNode(treeViewMain.SelectedNode.Nodes, txtSelectTreeNode.Text, TreeViewDirFlg.Checked);
            }
        }

        #endregion

        #region 選択ノードの背景色設定

        /// <summary>
        /// 選択ノードの背景色設定
        /// </summary>
        /// <param name="setColor"></param>
        private void SetNodeBackColor(Color setColor)
        {
            if (treeViewMain.SelectedNode != null)
            {
                treeViewMain.SelectedNode.BackColor = setColor;
            }
        }

        #endregion

        #region リスト更新

        private DrawThumbnailThread m_Process = null;
        private Thread m_Thread = null;

        /// <summary>
        /// リスト更新 TODO:修正要
        /// </summary>
        private void ListViewUpdate()
        {
            listViewMain.BeginUpdate();
            listViewMain.Items.Clear();

            string Target = txtSelectTreeNode.Text;

            if (Directory.Exists(Target))
            {
                try
                {
                    List<string> Files = new List<string>();
                    List<Size> SizeList = new List<Size>();

                    m_imgList = new List<ImageList>();
                    for (int i = 0; i <= trackBar1.Maximum; i++)
                    {
                        m_imgList.Add(new ImageList());
                        m_imgList[i].ImageSize = new Size(ThumbnailMaxHeight / (trackBar1.Maximum - i + 1), ThumbnailMaxWidth / (trackBar1.Maximum - i + 1));
                        SizeList.Add(m_imgList[i].ImageSize);
                    }

                    int count = 0;
                    ImageConverter imgConv = new ImageConverter();
                    foreach (string strFileName in Directory.GetFiles(Target))
                    {
                        FileInfo tmpFile = new FileInfo(strFileName);
                        string[] tmpItem = {
                                           Path.GetFileName(strFileName),
                                           tmpFile.LastWriteTime.ToShortDateString() + " " + tmpFile.LastWriteTime.ToShortTimeString(),
                                           tmpFile.CreationTime.ToShortDateString() + " " + tmpFile.CreationTime.ToShortTimeString(),
                                           tmpFile.Extension,
                                           tmpFile.Length.ToString()
                                       };

                        // 画像サムネイル設定
                        string strExtention = Path.GetExtension(strFileName).ToUpper();
                        //if (大きいアイコンToolStripMenuItem.Checked &&
                        //    strExtention == ".JPG" || strExtention == ".BMP" || strExtention == ".GIF" || strExtention == ".PNG")
                        //{
                        //    // falseオプションでかなり高速化した
                        //    Image orig = Image.FromStream(new FileStream(strFileName, FileMode.Open, FileAccess.Read), false, false);
                        //    Image thumbnail = orig.GetThumbnailImage(ThumbnailMaxHeight, ThumbnailMaxWidth, delegate { return false; }, IntPtr.Zero);

                        //    for (int i = 0; i <= trackBar1.Maximum; i++)
                        //    {
                        //        m_imgList[i].Images.Add(thumbnail);
                        //    }

                        //    listViewMain.Items.Add(new ListViewItem(tmpItem, m_imgList[0].Images.Count - 1));
                        //}
                        //else
                        //{

                        // ----------------------------
                        // UNCパスはアイコン取得できないためチェック
                        Uri CheckUnc = new Uri(strFileName);
                        if (CheckUnc.IsUnc)
                        {
                            listViewMain.Items.Add(new ListViewItem(tmpItem));
                        }
                        else
                        {
                            #region 拡張子を判別してアイコンを設定
                            if (m_imgList[0].Images.Keys.Contains(tmpFile.Extension))
                            {
                            }
                            else
                            {
                                Icon tmpIcon = Icon.ExtractAssociatedIcon(strFileName);
                                for (int i = 0; i <= trackBar1.Maximum; i++)
                                {
                                    m_imgList[i].Images.Add(tmpFile.Extension, tmpIcon);
                                }
                            }
                            listViewMain.Items.Add(new ListViewItem(tmpItem, m_imgList[0].Images.IndexOfKey(tmpFile.Extension)));
                            //listViewMain.Items.Add(new ListViewItem(tmpItem, count++));
                            Files.Add(strFileName);
                            #endregion

                            #region 対応するアイコンをそれぞれ取得する場合
                            //Icon tmpIcon = Icon.ExtractAssociatedIcon(strFileName);
                            //for (int i = 0; i <= trackBar1.Maximum; i++)
                            //{
                            //    m_imgList[i].Images.Add(tmpFile.Extension, tmpIcon);
                            //}

                            //listViewMain.Items.Add(new ListViewItem(tmpItem, m_imgList[0].Images.Count-1));
                            #endregion
                        }
                        // ----------------------------

                        //}

                        //listViewMain.Items.Add(new ListViewItem(tmpItem));
                    }

                    listViewMain.LargeImageList = m_imgList[trackBar1.Value];
                    listViewMain.SmallImageList = m_imgList[trackBar1.Value];

                    #region 別スレッドでサムネイル作成を想定
                    //m_Process = new DrawThumbnailThread(txtSelectTreeNode.Text, Files);
                    //m_Thread = new Thread(new ThreadStart(m_Process.Main));
                    //m_Thread.Start();
                    #endregion

                }
                catch (UnauthorizedAccessException)
                {
                }

                // 列幅自動調整
                listViewMain.AutoResizeColumns(ColumnHeaderAutoResizeStyle.HeaderSize);

            }

            listViewMain.EndUpdate();

            SetNodeBackColor(Color.Silver);
        }

        #endregion


        #region 選択ノードから絶対パスを取得

        /// <summary>
        /// 選択されているノードから絶対パスを取得する
        /// ツリー選択後の処理では、txtSelectTreeNode.Textから取得する
        /// </summary>
        /// <returns></returns>
        private string GetFullPathFromSelectNode()
        {
            if (treeViewMain.SelectedNode == null)
            {
                if (treeViewMain.TopNode == null)
                {
                    return string.Empty;
                }
                else
                {
                    return treeViewMain.TopNode.Text;
                }
            }
            
            string strPath = treeViewMain.SelectedNode.FullPath;

            if (treeViewMain.SelectedNode.ImageIndex == 0 || treeViewMain.SelectedNode.ImageIndex == 1)
            {
                strPath = GetDirectoryText(strPath);
            }

            if (strPath.First() == '\\')
            {
                // UNCパス用の置換防止
                strPath = "\\" + strPath;
            }

            return strPath.Replace("\\\\","\\");
        }

        #endregion

        #region 選択リストから絶対パスを取得

        /// <summary>
        /// 選択されているリストから絶対パスを取得する
        /// </summary>
        /// <returns></returns>
        private List<string> GetFullPathFromSelectList()
        {
            List<string> colRt = new List<string>();

            if (listViewMain.SelectedItems.Count > 0 && listViewMain.SelectedItems[0].Text != null && listViewMain.SelectedItems[0].Text != string.Empty)
            {
                foreach (ListViewItem tmpItem in listViewMain.SelectedItems)
                {
                    colRt.Add(Path.Combine(txtSelectTreeNode.Text, tmpItem.Text));
                }
            }
            else
            {
                colRt.Add(txtSelectTreeNode.Text);
            }

            return colRt;
        }

        #endregion

        #region 文字列のコレクションを、半角スペース区切りの文字列へ変換

        private string ConvertListToString(List<string> colList)
        {
            string strRt = string.Empty;

            foreach (string tmpItem in colList)
            {
                if (strRt != string.Empty)
                {
                    strRt = strRt + " ";
                }

                strRt = strRt + "\"" + tmpItem + "\"";
            }

            return strRt;
        }

        #endregion


        #region ツリーをCSV形式でファイル出力

        /// <summary>
        /// ツリーをCSV形式でファイル出力
        /// </summary>
        /// <param name="Nodes"></param>
        /// <param name="StWriter"></param>
        /// <param name="strPrefix"></param>
        private void WriteNode(TreeNodeCollection Nodes, StreamWriter StWriter, string strPrefix)
        {
            string Prefix = strPrefix + "\t";

            foreach (TreeNode NextNode in Nodes)
            {
                StWriter.WriteLine(Prefix + NextNode.Text);
                WriteNode(NextNode.Nodes, StWriter, Prefix);
            }
        }

        #endregion

        #region 外部プロセス起動

        /// <summary>
        /// 外部プロセス開始
        /// </summary>
        /// <param name="TargetPath"></param>
        private void ProcessStart(string TargetPath)
        {
            ProcessStart(TargetPath, string.Empty);
        }

        /// <summary>
        /// 外部プロセス開始（引数有り）
        /// </summary>
        /// <param name="TargetPath"></param>
        /// <param name="strArgument"></param>
        private void ProcessStart(string TargetPath, string strArgument)
        {
            Process.Start(TargetPath, strArgument);
        }

        #endregion

        #region 右クリックメニュー（第一階層）実行処理

        private void contextMenuClick(string strItemText, string strTarget)
        {
            List<String> colTarget =new List<String>();
            colTarget.Add(strTarget);
            contextMenuClick(strItemText,colTarget);
        }

        /// <summary>
        /// 右クリックメニュー処理
        /// </summary>
        /// <param name="strItemText"></param>
        /// <param name="strTarget"></param>
        private void contextMenuClick(string strItemText, List<string> colTarget)
        {
            if (strItemText != string.Empty && colTarget.Count > 0 && colTarget[0] != string.Empty)
            {
                switch (strItemText)
                {
                    case C_ContextMenuStripItem_Create:
                        break;

                    case C_ContextMenuStripItem_property:
                        ShowProperty(colTarget[0]);
                        break;

                    case C_ContextMenuStripItem_OpenFile:
                        ProcessStart(colTarget[0]);
                        break;

                    case C_ContextMenuStripItem_OpenDirectory:
                        ProcessStart(txtSelectTreeNode.Text);
                        break;

                    case C_ContextMenuStripItem_NewTabOpen:
                        OpenTab();
                        break;

                    case C_ContextMenuStripItem_CurrentTabOpen:
                        txtAddress.Text = GetFileText(colTarget[0]);
                        DrawTree();
                        break;

                    case C_ContextMenuStripItem_Copy:
                        m_CopyPasteMoveManager.Copy(colTarget);
                        break;

                    case C_ContextMenuStripItem_Move:
                        m_CopyPasteMoveManager.Move(colTarget);
                        break;

                    case C_ContextMenuStripItem_Paste:
                        // 再描画
                        AfterPasteTreeDraw(m_CopyPasteMoveManager.Paste(txtSelectTreeNode.Text));
                        ListViewUpdate();
                        break;

                    default:
                        break;
                }
            }
        }

        #endregion



        #endregion

        #region Shell32.dll functions

        /// <summary>
        /// 
        /// </summary>
        /// <param name="shinfo"></param>
        /// <returns></returns>
        [DllImport("Shell32.dll", CharSet = CharSet.Auto)]
        public static extern int ShellExecuteEx(SHELLEXECUTEINFO shinfo);

        /// <summary>
        /// プロパティ表示
        /// </summary>
        /// <param name="strPath"></param>
        private void ShowProperty(string strPath)
        {
            SHELLEXECUTEINFO shinfo = new SHELLEXECUTEINFO();
            shinfo.cbSize = Marshal.SizeOf(typeof(SHELLEXECUTEINFO));
            shinfo.fMask = 0x0000000c; ;
            shinfo.lpVerb = "Properties";
            shinfo.hwnd = (int)this.Handle;
            shinfo.lpParameters = null;
            shinfo.lpDirectory = null;
            shinfo.lpFile = strPath;
            ShellExecuteEx(shinfo);
        }

        #endregion
    }

    // -----------------------------

    #region ソート用クラス

    class ListViewItemComparer : System.Collections.IComparer
    {
        private int col;
        private int sortOrder;

        // コンストラクタ
        public ListViewItemComparer(int col, int sortOrder)
        {
            this.col = col;
            this.sortOrder = sortOrder;
        }
        // 比較メソッド
        public int Compare(object x, object y)
        {
            int ret = 0;

            //ListViewItemの取得
            ListViewItem itemx = (ListViewItem)x;
            ListViewItem itemy = (ListViewItem)y;

            //switch (col)
            //{
            //    case 1:    // サイズ列は数値でソート
            //        ret = int.Parse(((ListViewItem)x).SubItems[col].Text) <
            //           int.Parse(((ListViewItem)y).SubItems[col].Text) ? -1 : 1;
            //        break;

            //    case default:    // 文字列でソート
            //        ret = string.Compare(itemx.SubItems[col].Text,
            //    itemy.SubItems[col].Text);
            //        break;
            //}

            //xとyを文字列として比較する
            ret = string.Compare(itemx.SubItems[col].Text,
                itemy.SubItems[col].Text);
            return ret * sortOrder;
        }
    }

    #endregion

    #region プロパティ画面表示用クラス

    // ---------------------
    [StructLayout(LayoutKind.Sequential)]
    public class SHELLEXECUTEINFO
    {
        public int cbSize;
        public int fMask;
        public int hwnd;
        [MarshalAs(UnmanagedType.LPWStr)]
        public string lpVerb;
        [MarshalAs(UnmanagedType.LPWStr)]
        public string lpFile;
        [MarshalAs(UnmanagedType.LPWStr)]
        public string lpParameters;
        [MarshalAs(UnmanagedType.LPWStr)]
        public string lpDirectory;
        public int nShow;
        public int hInstApp;
        public int lpIDList;
        public string lpClass;
        public int hkeyClass;
        public int dwHotKey;
        public int hIcon;
        public int hProcess;
    }

    #endregion


    #region 別スレッドでサムネイル作成処理を行うとした

    public class DrawThumbnailThread
    {
        // ユーザコントロールの
        //　タイマーで以下のような処理が必要
        //Image[] addImage = m_Process.GetImageList;
        //foreach (ImageList tmpImageList in m_imgList)
        //{
        //    tmpImageList.Images.AddRange(addImage);
        //}


        const int ThumbnailMaxHeight = 160;
        const int ThumbnailMaxWidth = 160;

        private List<string> m_strFiles = null;
        private List<Image> m_Images = null;
        private string m_DirPath = null;

        private bool m_StopFlg = false;

        //public DrawThumbnailThread(string DirPath, List<string> strFiles, List<ImageList> Images ,int ImageCount)
        public DrawThumbnailThread(string DirPath, List<string> strFiles)
        {
            m_DirPath = DirPath;
            m_strFiles = strFiles;
            m_Images = new List<Image>();
        }

        public void Main()
        {
            foreach(string tmpItem in m_strFiles)
            {
                string strExtention = Path.GetExtension(tmpItem);
                if (strExtention == ".JPG" || strExtention == ".BMP" || strExtention == ".GIF" || strExtention == ".PNG")
                {
                    // falseオプションでかなり高速化した
                    Image orig = Image.FromStream(new FileStream(Path.Combine(m_DirPath, tmpItem), FileMode.Open, FileAccess.Read), false, false);
                    Image thumbnail = orig.GetThumbnailImage(ThumbnailMaxHeight, ThumbnailMaxWidth, delegate { return false; }, IntPtr.Zero);
                    lock (m_Images)
                    {
                        m_Images.Add(thumbnail);
                    }
                }
                else
                {
                    Icon tmpIcon = Icon.ExtractAssociatedIcon(Path.Combine(m_DirPath, tmpItem));
                    lock (m_Images)
                    {
                        m_Images.Add(tmpIcon.ToBitmap());
                    }
                }
            }
            while (!m_StopFlg)
            {
                Thread.Sleep(100);
            }
        }

        public void RequestStop()
        {
            m_StopFlg = true; 
        }

        public Image[] GetImageList
        {
            get
            {
                lock (m_Images)
                {
                    List<Image> RtObj = new List<Image>(); ;
                    foreach (Image tmpImage in m_Images)
                    {
                        #region シリアライズ
                        ////ImageListはシリアライズできない
                        //using (MemoryStream stream = new MemoryStream())
                        //{
                        //    // バイナリシリアル化を行うためのフォーマッタを作成
                        //    System.Runtime.Serialization.Formatters.Binary.BinaryFormatter f =
                        //        new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();

                        //    // 現在のインスタンスをシリアル化してMemoryStreamに格納
                        //    f.Serialize(stream, tmpImage);

                        //    // ストリームの位置を先頭に戻す
                        //    stream.Position = 0L;

                        //    // MemoryStreamに格納されている内容を逆シリアル化する
                        //    Image newImage = (Image)f.Deserialize(stream);
                        //    for (int i = 0; i < m_SizeList.Count; i++)
                        //    {
                        //        RtObj.Add(newImage);
                        //    }
                        //}
                        #endregion

                        RtObj.Add(tmpImage);
                        m_Images = new List<Image>();
                    }

                    return RtObj.ToArray();
                }
            }
        }
    }

    #endregion
}
